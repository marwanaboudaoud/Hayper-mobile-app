<?php


namespace Tests\Unit;


use App\Exceptions\Employee\EmployeeNotFoundException;
use App\Src\Models\Hyper\Address\AddressModel;
use App\Src\Models\Hyper\Declaration\DeclarationModel;
use App\Src\Models\Hyper\EmergencyContact\EmergencyContactModel;
use App\Src\Models\Hyper\Partner\PartnerModel;
use App\Src\Models\Hyper\User\UserModel;
use App\Src\Repositories\Hyper\Address\IAddressRepository;
use App\Src\Repositories\Hyper\Declaration\IDeclarationMailRepository;
use App\Src\Repositories\Hyper\Partner\IPartnerRepository;
use App\Src\Repositories\Hyper\User\IUserRepository;
use App\Src\Services\Hyper\Declaration\DeclarationUploadService;
use App\Src\Services\Hyper\Partner\PartnerService;
use App\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\Mail;
use Mockery as m;
use Tests\TestCase;

class DeclarationServiceTest extends TestCase
{
    /**
     * @var UserModel
     */
    private $userModel;

    /**
     * @var DeclarationModel
     */
    private $declarationModel;

    /**
     * @var IUserRepository
     */
    private $userRepository;

    /**
     * @var IUserRepository
     */
    private $userRepositoryNotFound;

    /**
     * @var IDeclarationMailRepository
     */
    private $declarationMailRepository;


    public function setUp(): void
    {
        $this->userModel = m::mock(UserModel::class, function ($mock) {
            $mock->shouldReceive('getId')
                ->andReturn(1);

            $mock->shouldReceive('getNmbrsId')
                ->andReturn(1);

            $mock->shouldReceive('getAlias')
                ->andReturn('rvw');

            $mock->shouldReceive('getInitials')
                ->andReturn('r');

            $mock->shouldReceive('getFirstName')
                ->andReturn('Ricky');

            $mock->shouldReceive('getInsertion')
                ->andReturn('van');

            $mock->shouldReceive('getLastname')
                ->andReturn('Waas');

            $mock->shouldReceive('getPhone')
                ->andReturn('061234567');

            $mock->shouldReceive('isHasDriversLicense')
                ->andReturn(true);

            $mock->shouldReceive('getDateOfBirth')
                ->andReturn('2019-01-01');

            $mock->shouldReceive('getCountryOfBirthId')
                ->andReturn(1);

            $mock->shouldReceive('getNationalityId')
                ->andReturn(1);

            $mock->shouldReceive('getMaritalStatusId')
                ->andReturn(1);

            $mock->shouldReceive('getEmail')
                ->andReturn('2019-01-01');

            $mock->shouldReceive('getPassword')
                ->andReturn('123456');

            $mock->shouldReceive('isActive')
                ->andReturn(true);
        });

        $this->declarationModel = m::mock(DeclarationModel::class, function ($mock) {
            $mock->shouldReceive('getId')
                ->andReturn(1);

            $mock->shouldReceive('getDateOfSubmission')
                ->andReturn(new Carbon('2020-01-22'));

            $mock->shouldReceive('getLocation')
                ->andReturn('Lelystad');

            $mock->shouldReceive('getAmountExcVat')
                ->andReturn(119.95);

            $mock->shouldReceive('getVat')
                ->andReturn(21);

            $mock->shouldReceive('getImage')
                ->andReturn('Duindorp');

            $mock->shouldReceive('getToken')
                ->andReturn('12345a');

            $mock->shouldReceive('getUser')
                ->andReturn($this->userModel);

            $mock->shouldReceive('setUser')
                ->with($this->userModel)
                ->andReturn($mock);
        });

        $this->userRepository = m::mock(IUserRepository::class, function ($mock) {
            $mock->shouldReceive('findByApiToken')
                ->with('12345a')
                ->andReturn($this->userModel);
        });

        $this->userRepositoryNotFound = m::mock(IUserRepository::class, function ($mock) {
            $mock->shouldReceive('findByApiToken')
                ->with('12345a')
                ->andReturn(null);
        });

        $this->declarationMailRepository = m::mock(IDeclarationMailRepository::class, function ($mock) {
            $mock->shouldReceive('mail')
                ->with(DeclarationModel::class);
        });
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testDeclarationUpload()
    {
        $service = new DeclarationUploadService($this->declarationMailRepository, $this->userRepository);
        $service->upload($this->declarationModel);
    }

    public function testDeclarationUserNotFound()
    {
        $this->expectException(EmployeeNotFoundException::class);

        $service = new DeclarationUploadService($this->declarationMailRepository, $this->userRepositoryNotFound);
        $service->upload($this->declarationModel);
    }
}
