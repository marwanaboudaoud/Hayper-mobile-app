<?php

namespace Tests\Unit;

use App\Exceptions\Schedule\ScheduleNotFoundException;
use App\Src\Models\Hyper\Schedule\ScheduleModel;
use App\Src\Repositories\Hyper\Schedule\IScheduleRepository;
use App\Src\Services\Hyper\Schedule\ScheduleUpdateService;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Mockery as m;

class ScheduleUpdateServiceTest extends TestCase
{
    /**
     * @var ScheduleModel
     */
    private $scheduleModel;

    private $repo;
    /**
     * @var IScheduleRepository|m\LegacyMockInterface|m\MockInterface
     */
    private $repoNotFound;

    public function setUp(): void
    {
        $this->scheduleModel = m::mock(ScheduleModel::class, function ($mock) {
            $mock->shouldReceive('getId')
                ->andReturn(1);
        });

        $this->repo = m::mock(IScheduleRepository::class, function ($mock) {
            $mock->shouldReceive('findById')
                ->with(1)
                ->andReturn($this->scheduleModel);

            $mock->shouldReceive('update')
                ->with(ScheduleModel::class)
                ->andReturn(true);
        });

        $this->repoNotFound =  m::mock(IScheduleRepository::class, function ($mock) {
            $mock->shouldReceive('findById')
                ->with(1)
                ->andReturn(null);
        });

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testUpdate()
    {
        $service = new ScheduleUpdateService(
            $this->repo
        );
        $result = $service->update($this->scheduleModel);

        $this->assertTrue($result);
    }

    public function testUpdateWithNoExistingSchedule()
    {
        $this->expectException(ScheduleNotFoundException::class);

        $service = new ScheduleUpdateService(
            $this->repoNotFound
        );
        $service->update($this->scheduleModel);
    }
}
