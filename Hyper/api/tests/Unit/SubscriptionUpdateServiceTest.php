<?php

namespace Tests\Unit;

use App\Exceptions\Project\ProjectNotFoundException;
use App\Exceptions\Subscription\SubscriptionNotFoundException;
use App\Src\Mappers\Hyper\Subscription\SubscriptionEloquentModelMapper;
use App\Src\Mappers\Hyper\Subscription\SubscriptionModelMapper;
use App\Src\Models\Hyper\Project\ProjectModel;
use App\Src\Models\Hyper\Subscription\HistorySubscriptionModel;
use App\Src\Models\Hyper\Subscription\SubscriptionModel;
use App\Src\Repositories\Hyper\Subscription\ISubscriptionRepository;
use App\Src\Services\Hyper\Project\IProjectService;
use App\Src\Services\Hyper\Subscription\IHistorySubscriptionService;
use App\Src\Services\Hyper\Subscription\IStoreHistorySubscriptionService;
use App\Src\Services\Hyper\Subscription\UpdateSubscriptionService;
use App\Subscription;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Mockery as m;

class SubscriptionUpdateServiceTest extends TestCase
{
    /**
     * @var ISubscriptionRepository
     */
    private $subscriptionRepository;

    private $invalidSubscriptionRepository;

    /**
     * @var IProjectService
     */
    private $projectService;
    /**
     * @var IProjectService|m\LegacyMockInterface|m\MockInterface
     */
    private $invalidProjectService;
    /**
     * @var IHistorySubscriptionService|m\LegacyMockInterface|m\MockInterface
     */
    private $historySubscription;
    /**
     * @var IStoreHistorySubscriptionService|m\LegacyMockInterface|m\MockInterface
     */
    private $storeHistorySubscription;

    public function setUp(): void
    {
        $this->subscriptionRepository = m::mock(ISubscriptionRepository::class, function ($mock) {
            $mock->shouldReceive('find')
                ->with(1)
                ->andReturn((new SubscriptionModel()));

            $mock->shouldReceive('update')
                ->with(SubscriptionModel::class)
                ->andReturn((new SubscriptionModel()));
        });

        $this->invalidSubscriptionRepository = m::mock(ISubscriptionRepository::class, function ($mock) {
            $mock->shouldReceive('find')
                ->with(1)
                ->andReturn(null);
        });

        $this->projectService = m::mock(IProjectService::class, function ($mock) {
            $mock->shouldReceive('find')
                ->with(1)
                ->andReturn((new ProjectModel()));
        });

        $this->invalidProjectService = m::mock(IProjectService::class, function ($mock) {
            $mock->shouldReceive('find')
                ->with(1)
                ->andReturn(null);
        });

        $this->historySubscription = m::mock(IHistorySubscriptionService::class, function ($mock) {
            $mock->shouldReceive('setInActive')
                ->with(HistorySubscriptionModel::class)
                ->andReturn(collect());
        });

        $this->storeHistorySubscription = m::mock(IStoreHistorySubscriptionService::class, function ($mock) {
            $mock->shouldReceive('store')
                ->with(HistorySubscriptionModel::class);
        });

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testUpdate()
    {
        $subscription = (new SubscriptionModel())->setId(1)->setProjectId(1);

        $service = new UpdateSubscriptionService(
            $this->subscriptionRepository,
            $this->projectService,
            $this->historySubscription,
            $this->storeHistorySubscription
        );
        $service->update($subscription);
    }

    public function testUpdateInvalidSubscription()
    {
        $this->expectException(SubscriptionNotFoundException::class);

        $subscription = (new SubscriptionModel())->setId(1)->setProjectId(1);

        $service = new UpdateSubscriptionService(
            $this->invalidSubscriptionRepository,
            $this->invalidProjectService,
            $this->historySubscription,
            $this->storeHistorySubscription
        );
        $service->update($subscription);

    }
}
