<?php

namespace Tests\Unit;


use App\Exceptions\Salary\SalaryRowNotFound;
use App\Src\Models\Hyper\Salary\SalaryDayModel;
use App\Src\Models\Hyper\Salary\SalaryModel;
use App\Src\Repositories\Hyper\Salary\ISalaryManualDeleteRepository;
use App\Src\Services\Hyper\Salary\ISalaryManualService;
use App\Src\Services\Hyper\Salary\ISalaryService;
use App\Src\Services\Hyper\Salary\SalaryRowManualDeleteService;
use Mockery as m;
use Tests\TestCase;

class SalaryRowManualDeleteServiceTest extends TestCase
{
    /**
     * @var ISalaryManualService
     */
    private $salaryManualService;

    /**
     * @var ISalaryManualService
     */
    private $salaryManualServiceNotFound;

    /**
     * @var ISalaryManualDeleteRepository
     */
    private $salaryManualDeleteRepository;

    /**
     * @var ISalaryManualDeleteRepository
     */
    private $salaryManualDeleteRepositoryNotValid;

//    /**
//     * @var ISalaryManualDeleteRepository
//     */
//    private $salaryManualDeleteRepositoryNotFound;

    /**
     * @var SalaryDayModel
     */
    private $salaryDayModel;

    /**
     * @var SalaryDayModel
     */
    private $salaryDayModelNotValid;

//    /**
//     * @var SalaryRowModel
//     */
//    private $salaryRowModelNotFound;

    private $salaryService;

    /**
     * @var SalaryModel|m\LegacyMockInterface|m\MockInterface
     */
    private $salaryModel;


    public function setUp(): void
    {
        $this->salaryModel = m::mock(SalaryModel::class, function ($mock) {
            $mock->shouldReceive('isClosed')
                ->andReturn(false);
        });

        $this->salaryDayModel = m::mock(SalaryDayModel::class, function ($mock) {
            $mock->shouldReceive('isManual')
                ->andReturn(true);

            $mock->shouldReceive('getSalaryId')
                ->andReturn(1);
        });

        $this->salaryDayModelNotValid = null;

        $this->salaryManualService = m::mock(ISalaryManualService::class, function ($mock) {
            $mock->shouldReceive('find')
                ->with(1)
                ->andReturn($this->salaryDayModel);
        });

        $this->salaryManualServiceNotFound = m::mock(ISalaryManualService::class, function ($mock) {
            $mock->shouldReceive('find')
                ->with(1)
                ->andThrow(\Exception::class);
        });

        $this->salaryService = m::mock(ISalaryService::class, function ($mock) {
            $mock->shouldReceive('find')
                ->with(1)
                ->andReturn($this->salaryModel);
        });


        $this->salaryManualDeleteRepository = m::mock(ISalaryManualDeleteRepository::class, function ($mock) {
            $mock->shouldReceive('delete')
                ->with(1);
        });

        $this->salaryManualDeleteRepositoryNotValid = m::mock(ISalaryManualDeleteRepository::class, function ($mock) {
            $mock->shouldReceive('delete')
                ->with(1);
        });

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testDeleteManualSalaryRow()
    {
        $service = new SalaryRowManualDeleteService(
            $this->salaryManualService,
            $this->salaryService,
            $this->salaryManualDeleteRepository
        );
        $service->delete(1);
    }

    public function testSalaryRowNotFound()
    {
        $this->expectException(\Exception::class);

        $service = new SalaryRowManualDeleteService
        (
            $this->salaryManualServiceNotFound,
            $this->salaryService,
            $this->salaryManualDeleteRepository

        );
        $service->delete(1);
    }


}
